#!/bin/bash -e

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

usage() {
  cat <<END
Usage: $progname OPTIONS
  -h            Display this help text
  -i            Interactive mode - show a bash console
  -p            Specify listen port. Defaults to 21025
  -d            Specify data container. Defaults to starbound_data

${*:-}
END
  exit 1
}

while getopts "hp:id:H:I:" OPTION ; do
  case $OPTION in
    h)
      usage
      ;;
    p)
      PORT=$OPTARG
      ;;
    d)
      DATA_CONTAINER=$OPTARG
      ;;
    i)
      INTERACTIVE=true
      ;;
    *)
      usage
      ;;
  esac
done

PORT=${PORT:-21025}
DATA_CONTAINER=${DATA_CONTAINER:-starbound_data}

if [ -z "$DOCKER_HOST" ]; then
  echo "Warning: DOCKER_HOST is not set. Make sure you've set your docker env variables"
  echo "Using default values but this may not work"
fi
export DOCKER_HOST=${DOCKER_HOST:-tcp://192.168.99.100:2376}
export DOCKER_CERT_PATH=${DOCKER_CERT_PATH:-$HOME/.docker/machine/machines/dev}
export DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY:-1}

# make sure this data container exists
$DIR/build_data -d $DATA_CONTAINER

# --volumes-from mounts another container's volumes
# -it tells it to keep STDIN open (-i) and to allocate a tty for the container process (-t)
# -p forwards an external port to a port within the container
if [ $INTERACTIVE ]; then
  docker run --volumes-from $DATA_CONTAINER -v /data -p $PORT:21025/tcp -p $PORT:21025/udp -it starbound /sbin/my_init --quiet -- /bin/bash
else
  docker run --volumes-from $DATA_CONTAINER -v /data -p $PORT:21025/tcp -p $PORT:21025/udp     starbound
fi
